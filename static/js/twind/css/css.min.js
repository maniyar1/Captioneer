import{apply,hash,directive}from"twind";var includes=(e,r)=>!!~e.indexOf(r),join=(e,r="-")=>e.join(r),hyphenate=e=>e.replace(/[A-Z]/g,"-$&").toLowerCase(),evalThunk=(e,r)=>{for(;"function"==typeof e;)e=e(r);return e},isCSSProperty=(e,r)=>!includes("@:&",e[0])&&(includes("rg",(typeof r)[5])||Array.isArray(r)),merge=(e,r,s)=>r?Object.keys(r).reduce((e,a)=>{const t=evalThunk(r[a],s);return isCSSProperty(a,t)?e[hyphenate(a)]=t:e[a]="@"==a[0]&&includes("figa",a[1])?(e[a]||[]).concat(t):merge(e[a]||{},t,s),e},e):e,escape="undefined"!=typeof CSS&&CSS.escape||(e=>e.replace(/[!"'`*+.,;:\\/<=>?@#$%&^|~()[\]{}]/g,"\\$&").replace(/^\d/,"\\3$& ")),buildMediaQuery=e=>(Array.isArray(e)||(e=[e]),"@media "+join(e.map(e=>("string"==typeof e&&(e={min:e}),e.raw||join(Object.keys(e).map(r=>`(${r}-width:${e[r]})`)," and "))),","));export*from"twind";var translate=(e,r)=>{const s=(e,a)=>Array.isArray(a)?a.reduce(s,e):merge(e,evalThunk(a,r),r);return e.reduce(s,{})},newRule=/\s*(?:([\w-%@]+)\s*:?\s*([^{;]+?)\s*(?:;|$|})|([^;}{]*?)\s*{)|(})/gi,ruleClean=/\/\*[\s\S]*?\*\/|\s+|\n/gm,decorate=(e,r)=>e.reduceRight((e,r)=>({[r]:e}),r),saveBlock=(e,r,s)=>{s&&e.push(decorate(r,s))},interleave=(e,r,s)=>{let a=e[0];const t=[];for(let n=0;n<r.length;){const i=evalThunk(r[n],s);i&&"object"==typeof i?(t.push(a,i),a=e[++n]):a+=(i||"")+e[++n]}return t.push(a),t},astish=(e,r)=>{const s=[],a=[];let t,n;for(let i=0;i<e.length;i++){const c=e[i];if("string"==typeof c){for(;n=newRule.exec(c.replace(ruleClean," "));)if(n[0])if(n[4]&&(t=saveBlock(a,s,t),s.pop()),n[3])t=saveBlock(a,s,t),s.push(n[3]);else if(!n[4]){t||(t={});const s=n[2]&&/\S/.test(n[2])?n[2]:e[++i];s&&("@apply"==n[1]?merge(t,evalThunk(apply(s),r),r):t[n[1]]=s)}}else t=saveBlock(a,s,t),a.push(decorate(s,c))}return saveBlock(a,s,t),a},cssFactory=(e,r)=>translate(Array.isArray(e[0])&&Array.isArray(e[0].raw)?astish(interleave(e[0],e.slice(1),r),r):e,r),css=(...e)=>directive(cssFactory,e),keyframesFactory=(e,r)=>{const s=cssFactory(e,r),a=hash(JSON.stringify(s));return r.tw(()=>({[`@keyframes ${a}`]:s})),a},keyframes=(...e)=>directive(keyframesFactory,e),animation=(e,r)=>void 0===r?(...r)=>animation(e,keyframes(...r)):css({...e&&"object"==typeof e?e:{animation:e},animationName:"function"==typeof r?r:keyframes(r)}),screenFactory=({size:e,rules:r},s)=>{const a=buildMediaQuery(s.theme("screens",e));return void 0===r?a:{[a]:"function"==typeof r?evalThunk(r,s):cssFactory([r],s)}},screen=(e,r)=>directive(screenFactory,{size:e,rules:r});export{animation,css,keyframes,screen};